name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
  release:
    types: [published]

env:
  DOTNET_VERSION: 8.0.x
  PROJECT_NAME: Billio.sln
  TESTS_LOCATION: ./tests/xUnitTests

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Build
      run: dotnet build ${{ env.PROJECT_NAME }}

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Run tests
      run: |
        dotnet test --configuration ${DOTNET_CONFIGURATION=Release} ${{ env.TESTS_LOCATION }} /p:CollectCoverage=true /p:CoverletOutputFormat=\"opencover\"

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' # Run only for PR events

    steps:
    # Step 1: Check out the Biller repository
    - name: Checkout Biller repository
      uses: actions/checkout@v4

    # Step 2: Determine the branch to use for BillioIntegrationTest
    - name: Determine branch for BillioIntegrationTest
      id: determine-branch
      run: |
        BRANCH_NAME="${GITHUB_HEAD_REF}"        
        # Echo branch for debugging
        echo "Branch detected: $BRANCH_NAME"

        # Check if the branch exists in BillioIntegrationTest
        if git ls-remote --heads https://github.com/aldisadom/BillioIntegrationTest.git "refs/heads/$BRANCH_NAME"; then
          echo "Using branch: $BRANCH_NAME"
          echo "test_branch=$BRANCH_NAME" >> $GITHUB_ENV
        else
          echo "Branch $BRANCH_NAME not found. Defaulting to 'main'."
          echo "test_branch=main" >> $GITHUB_ENV
        fi

    # Step 3: Clone the BillioIntegrationTest repository with the determined branch
    - name: Clone BillioIntegrationTest repository
      run: |
        git clone --branch ${{ env.test_branch }} https://github.com/aldisadom/BillioIntegrationTest.git ./BillioIntegrationTest

    # Step 4: Set up Docker
    - name: Set up Docker
      run: |
        docker --version
        docker compose --version

    # Step 5: Start services using docker-compose
    - name: Start services
      run: |
        docker compose up -d

    # Step 6: Wait for services to be ready (customize for your environment)
    - name: Wait for services to be ready
      run: |
        sleep 30 # Adjust the delay based on service startup time

    # Step 7: Run integration tests
    - name: Run integration tests
      working-directory: ./BillioIntegrationTest
      run: |
        dotnet restore
        dotnet build
        dotnet test --logger:trx

    # Step 8: Tear down services
    - name: Stop and clean up services
      run: |
        docker compose down
